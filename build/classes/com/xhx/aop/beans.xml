<?xml version="1.0" encoding="UTF-8"?>
 <beans xmlns="http://www.springframework.org/schema/beans"
 	 xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:context="http://www.springframework.org/schema/context"
     xmlns:util="http://www.springframework.org/schema/util"   
     xsi:schemaLocation="
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
     <!-- 配置被代理对象 -->  
     <bean id="testService" class="com.xhx.aop.TestService" >
     	<property name="name" value="夏"></property>     
     </bean>
     <!-- 配置前置通知 
     proxyFactoryBean implements TestServiceInterface{
     	public void sayHello();
     }
     
   	 思考********
     interface Inter1{};
     
     class A implements Inter1,Inter2{
     
     }
     Inter1 a = new A();
     如果一个类实现了多个接口，那么各个接口之间可以相互转换的
     Inter2 b = (Inter2)a;
           通知（advice）  -->
     <bean id="myMethodBeformAdvice" class="com.xhx.aop.MyMethodBeformAdvice"></bean>     	
     <bean id="myhuanraoAdvice" class="com.xhx.aop.MyhuanraoAdvice"> </bean>
     <bean id="myThrowsAdvice" class="com.xhx.aop.MyThrowsAdvice"> </bean>
     <!-- 配置自定义的切入点 -->
     <bean id="methodBeformAdviceFilter" class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
     	<property name="advice" ref="myMethodBeformAdvice"></property>
     	<property name="mappedNames">
     		<list>
     			<value>Say*</value>
     		</list>
     	</property>
     </bean>
     <!-- 配置代理对象 -->  
     <bean id="proxyFactoryBean" class="org.springframework.aop.framework.ProxyFactoryBean">
     <!--代理接口集>  -->
     <property name="proxyInterfaces">
     	<list>
     		<value>com.xhx.aop.TestServiceInterface</value>
     		<value>com.xhx.aop.TestServiceInterface2</value>
     	</list>
     </property>
     <!-- 在代理对象中植入前置通知 (拦截器) 将前置通知与代理对象关联起来
    	 切入点（pointcut）
     -->
     <property name="interceptorNames">
     	<list>
     		<value>methodBeformAdviceFilter</value>
     		<value>myhuanraoAdvice</value>
     		<value>myThrowsAdvice</value>
     	</list>
     		
     </property>
     <!-- 指定被代理对象 -->
     <property name="target" ref="testService">     	
     </property>
     </bean>
     
</beans>